/// Generic error while invoking FFI
[Error]
enum ConcordiumWalletCryptoError {
    "CallFailed"
};

/// Describes errors happening while interacting with contract schemas
[Error]
enum SchemaError {
    /// Failed to convert value with schema
    "Convert",
    /// Failed parse the module schema
    "ParseSchema",
};

enum Network {
    "Testnet",
    "Mainnet",
};

/// The supported set of attributes which are stored on identities and optionally revealed by accounts.
/// In some contexts (such as the gRPC API), attribute tags are represented by a byte (the raw type of this enum).
/// Where human readability is a concern, the string representation implemented by ``description`` is used.
/// Note that since ``AttributeList`` (which is a component of ``IdentityObject``) is defined in another library, it cannot use this type.
/// Instead, its field `chosenAttributes` is a map from the string representation of the tag to the value.
/// Use the appropriate initializer of this type to convert it.
/// All attribute values are strings of 31 bytes or less. The expected format of the values is documented
/// [here](https://docs.google.com/spreadsheets/d/1CxpFvtAoUcylHQyeBtRBaRt1zsibtpmQOVsk7bsHPGA/edit).
enum AttributeTag {
    /// First name (format: string up to 31 bytes).
    "FirstName",
    /// Last name (format: string up to 31 bytes).
    "LastName",
    /// Sex (format: ISO/IEC 5218).
    "Sex",
    /// Date of birth (format: ISO8601 YYYYMMDD).
    "DateOfBirth",
    /// Country of residence (format: ISO3166-1 alpha-2).
    "CountryOfResidence",
    /// Country of nationality (format: ISO3166-1 alpha-2).
    "Nationality",
    /// Identity document type
    ///
    /// Format:
    /// - 0 : na
    /// - 1 : passport
    /// - 2 : national ID card
    /// - 3 : driving license
    /// - 4 : immigration card
    /// - eID string (see below)
    ///
    /// eID strings as of Apr 2024:
    /// - DK:MITID        : Danish MitId
    /// - SE:BANKID       : Swedish BankID
    /// - NO:BANKID       : Norwegian BankID
    /// - NO:VIPPS        : Norwegian Vipps
    /// - FI:TRUSTNETWORK : Finnish Trust Network
    /// - NL:DIGID        : Netherlands DigiD
    /// - NL:IDIN         : Netherlands iDIN
    /// - BE:EID          : Belgian eID
    /// - ITSME           : (Cross-national) ItsME
    /// - SOFORT          : (Cross-national) Sofort
    "IdDocType",
    /// Identity document number (format: string up to 31 bytes).
    "IdDocNo",
    /// Identity document issuer (format: ISO3166-1 alpha-2 or ISO3166-2 if applicable).
    "IdDocIssuer",
    /// Time from which the ID is valid (format: ISO8601 YYYYMMDD).
    "IdDocIssuedAt",
    /// Time to which the ID is valid (format: ISO8601 YYYYMMDD).
    "IdDocExpiresAt",
    /// National ID number (format: string up to 31 bytes).
    "NationalIdNo",
    /// Tax ID number (format: string up to 31 bytes).
    "TaxIdNo",
    /// LEI-code - companies only (format: ISO17442).
    "LegalEntityId",
    /// Legal name - companies only
    "LegalName",
    /// Legal country - companies only
    "LegalCountry",
    /// Business number associated with the company - companies only
    "BusinessNumber",
    /// Registration authority - companies only
    "RegistrationAuth",
};

/// Parameter object for `identity_issuance_request_json`.
dictionary IdentityIssuanceRequestParameters {
    IdentityProviderInfo ip_info;
    GlobalContext global_context;
    record<u32, AnonymityRevokerInfo> ars_infos;
    u8 ar_threshold;
    Bytes prf_key;
    Bytes id_cred_sec;
    Bytes blinding_randomness;
};

/// Parameter object for `identity_recovery_request_json`.
dictionary IdentityRecoveryRequestParameters {
    IdentityProviderInfo ip_info;
    GlobalContext global_context;
    u64 timestamp;
    Bytes id_cred_sec;
};

/// Public information about an identity provider.
dictionary IdentityProviderInfo {
    /// Unique identifier of the identity provider.
    u32 identity;
    /// Free form description, e.g., how to contact them off-chain.
    Description description;
    /// PS public key of the identity provider.
    Bytes verify_key;
    /// Ed public key of the identity provider.
    Bytes cdi_verify_key;
};

/// A set of cryptographic parameters that are particular to the chain and
/// shared by everybody that interacts with the chain.
dictionary GlobalContext {
    /// Shared commitment key known to the chain and the account holder (i.e. it's public).
    /// The account holder uses this commitment key to generate commitments to values in the attribute list.
    Bytes on_chain_commitment_key;
    /// Generators for the bulletproofs.
    Bytes bulletproof_generators;
    /// Free-form string used to distinguish between different chains even if they share other parameters.
    string genesis_string;
};

/// Information on an anonymity revoker held by the identity provider.
dictionary AnonymityRevokerInfo {
    /// Unique identifier of the anonymity revoker.
    u32 identity;
    /// Description of the anonymity revoker (e.g. name, contact number).
    Description description;
    /// Elgamal encryption key of the anonymity revoker.
    Bytes public_key;
};

/// Metadata of an identity provider or anonymity revoker
/// to be visible on the chain.
dictionary Description {
    string name;
    string url;
    string description;
};

/// Parameter object for `account_credential`.
dictionary AccountCredentialParameters {
    IdentityProviderInfo ip_info;
    GlobalContext global_context;
    record<u32, AnonymityRevokerInfo> ars_infos;
    IdentityObject id_object;
    sequence<AttributeTag> revealed_attributes;
    u8 cred_number;
    Bytes id_cred_sec;
    Bytes prf_key;
    Bytes blinding_randomness;
    record<AttributeTag, Bytes> attribute_randomness;
    CredentialPublicKeys credential_public_keys;
};

/// The data we get back from the identity provider in the version 1 flow.
dictionary IdentityObject {
    PreIdentityObject pre_identity_object;
    /// Chosen attribute list.
    AttributeList attribute_list;
    Bytes signature;
};

/// Information sent from the account holder to the identity provider.
/// This includes only the cryptographic parts; the attribute list is in a different object below.
/// This is for the flow where no initial account is involved.
dictionary PreIdentityObject {
    Bytes id_cred_pub;
    /// Anonymity revocation data for the chosen anonymity revokers.
    record<u32, ArData> ip_ar_data;
    /// Choice of anonyimity revocation parameters.
    /// Identity provider checks that the values make sense in the context of the public keys they are allowed to use.
    ChoiceArParameters choice_ar_data;
    /// Commitment to ID cred sec using the commitment key of the identity provider derived from the PS public key.
    /// This is used to compute the message that the identity provider signs.
    Bytes id_cred_sec_commitment;
    /// Commitment to the PRF key in group G1.
    Bytes prf_key_commitment_with_ip;
    /// Commitments to the coefficients of the polynomial used to share the PRF key.
    sequence<Bytes> prf_key_sharing_coeff_commitments;
    /// Proof that the data sent to the identity provider is well-formed.
    Bytes proofs_of_knowledge;
};

/// Choice of anonymity revocation parameters.
dictionary ChoiceArParameters {
    sequence<u32> ar_identities;
    u8 threshold;
};

/// The data relating to a single anonymity revoker
/// sent by the account holder to the identity provider.
/// Typically the account holder will send a vector of these.
dictionary ArData {
    /// Encryption in chunks (in little endian) of the PRF key share.
    Bytes enc_prf_key_share;
    /// Response in the proof that the computed commitment to the share
    /// contains the same value as the encryption.
    /// The commitment to the share is not sent but computed from the commitments to the sharing coefficients.
    Bytes proof_com_enc_eq;
};

/// An attribute list that is part of a normal credential.
/// It consists of some mandatory attributes and some user selected attributes.
dictionary AttributeList {
    /// The latest month and year where the credential is still valid.
    string valid_to_year_month;
    /// The year and month when the identity object from which the credential is derived was created.
    /// This deliberately has low granularity since if it was, e.g., a unix timestamp in seconds,
    /// then the identity provider could link accounts on the chain to identities they have issued.
    string created_at_year_month;
    /// Maximum number of accounts that can be created from the owning identity object.
    u8 max_accounts;
    /// The attributes map.
    record<AttributeTag, string> chosen_attributes;
};

/// The result of a new credential being created using the function `account_credential`.
dictionary AccountCredentialWithRandomness {
    AccountCredential credential;
    Randomness randomness;
};

/// Randomness that is generated to commit to attributes when creating a credential.
/// This randomness is needed to do something with those commitments later,
/// for example reveal the committed value or prove a property of the value.
dictionary Randomness {
    /// Randomness used to commit to any user-chosen attributes, such as country of nationality.
    record<AttributeTag, Bytes> attributes_rand;
    /// Randomness of the commitment to the credential nonce.
    /// This nonce is the number that is used to ensure that only a limited number of credentials
    /// can be created from a given identity object.
    Bytes cred_counter_rand;
    /// Randomness of the commitment to idCredSec.
    Bytes id_cred_sec_rand;
    /// Randomness of the commitment to the maximum number of accounts that may be created from the identity object.
    Bytes max_accounts_rand;
    /// Randomness of the commitment to the PRF key.
    Bytes prf_rand;
};

/// An account credential containing proofs without signatures.
/// To deploy a credential, an object of this type is
/// hashed using `account_credential_deployment_hash`
/// which is signed using the key derived for the credential.
/// The results are collected into a `SignedAccountCredential`
/// and serialized using `account_credential_deployment_signed_payload`.
/// The result of this call can be submitted to the chain.
dictionary AccountCredential {
    /// List of anonymity revokers which can revoke the identity.
    /// The order is important since it is the same order as that signed by the identity provider,
    /// and permuting the list will invalidate the signature from the identity provider.
    record<u32, ChainArData> ar_data;
    /// Credential registration ID of the credential.
    Bytes cred_id;
    /// Credential keys (i.e. account holder keys).
    CredentialPublicKeys credential_public_keys;
    /// Identity of the identity provider who signed the identity object
    /// from which this credential is derived.
    u32 ip_identity;
    /// Policy of this credential object.
    Policy policy;
    Proofs proofs;
    /// Anonymity revocation threshold. Must be less than the number of entries in `ar_data`.
    u8 revocation_threshold;
};

/// Data relating to a single anonymity revoker constructed by the account holder.
/// Typically a vector of these will be sent to the chain.
dictionary ChainArData {
    Bytes enc_id_cred_pub_share;
};

/// Public credential keys currently on the account.
/// The threshold determines the number of required signatures on a transaction for it to be valid.
dictionary CredentialPublicKeys {
    record<u8, VerifyKey> keys;
    u8 threshold;
};

/// Public AKA verification key for a given scheme.
/// Currently the only supported value of `scheme_id` is "Ed25519".
dictionary VerifyKey {
    string scheme_id;
    Bytes key;
};

/// A policy is (currently) revealed values of attributes that are part of the identity object.
/// Policies are part of credentials.
dictionary Policy {
    string created_at_year_month;
    string valid_to_year_month;
    record<AttributeTag, string> revealed_attributes;
};

/// All proofs required to prove ownership of an identity in a credential deployment.
dictionary Proofs {
    /// Challenge used for all of the proofs.
    Bytes challenge;
    /// List of commitments to the attributes.
    Bytes commitments;
    /// Proof that credential counter is at most equal to the maximum allowed number of account.
    Bytes cred_counter_less_than_max_accounts;
    /// Responses in the proof that the computed commitment to the share
    /// contains the same value as the encryption.
    /// The commitment to the share is not sent but computed from the commitments to the sharing coefficients.
    record<string, Bytes> proof_id_cred_pub;
    /// Responses in the proof of knowledge of signature of the identity provider.
    Bytes proof_ip_sig;
    /// Proof that registration ID is valid and computed from the PRF key signed by the identity provider.
    Bytes proof_reg_id;
    /// (Blinded) signature derived from the signature on the pre-identity object by the identity provider.
    Bytes signature;
};

/// The credential deployment context required to serialize a credential deployment for submission to the chain.
dictionary SignedAccountCredential {
    AccountCredential credential;
    record<u8, Bytes> signatures;
};

[Custom]
typedef bytes Bytes;

[Custom]
typedef u64 MicroCCDAmount;

/// An encrypted amount input to transfer from
dictionary InputEncryptedAmount {
    /// The aggregated encrypted amount.
    Bytes agg_encrypted_amount;
    /// The plaintext corresponding to the aggregated encrypted amount.
    u64 agg_amount;
    /// Index such that the `agg_amount` is the sum of all encrypted amounts on an account with indices strictly below `agg_index`.
    u64 agg_index;
};

/// The payload data for a TransferToPublic transaction
dictionary SecToPubTransferData {
    /// The serialized remaining amount after deducting the amount to transfer
    /// Serialized according to the [`Serial`] implementation of [`concordium_base::encrypted_transfers::types::EncryptedAmount`]
    Bytes remaining_amount;
    /// The amount to transfer in microCCD.
    MicroCCDAmount transfer_amount;
    /// The transfer index of the transfer
    u64 index;
    /// The serialized proof that the transfer is correct.
    /// Serialized according to the [`Serial`] implementation of [`concordium_base::encrypted_transfers::types::SecToPubAmountTransferProof`]
    Bytes proof;
};

dictionary SecToPubTransferDataDeserializeResult {
    SecToPubTransferData value;
    u64 bytes_read;
};

/// A credential with attributes, public keys, and proofs that it is
/// well-formed.
dictionary CredentialDeploymentInfo {
    /// List of anonymity revokers which can revoke the identity.
    /// The order is important since it is the same order as that signed by the identity provider,
    /// and permuting the list will invalidate the signature from the identity provider.
    record<u32, ChainArData> ar_data;
    /// Credential registration ID of the credential.
    /// Serialized according to the corresponding `serde::Serialize` implementation in concordium-base.
    Bytes cred_id;
    /// Credential keys (i.e. account holder keys).
    CredentialPublicKeys credential_public_keys;
    /// Identity of the identity provider who signed the identity object
    /// from which this credential is derived.
    u32 ip_identity;
    /// Policy of this credential object.
    Policy policy;
    /// The proofs of ownership.
    /// Serialized according to the corresponding `serde::Serialize` implementation in concordium-base
    Bytes proofs;
    /// Anonymity revocation threshold. Must be less than the number of entries in `ar_data`.
    u8 revocation_threshold;
};

dictionary UpdateCredentialsPayload {
    /// Credential infos and the respective indices to insert them at
    record<u8, CredentialDeploymentInfo> new_cred_infos;
    /// List of credentials to remove
    sequence<Bytes> remove_cred_ids;
    /// The new threshold of the account
    u8 new_threshold;
};

dictionary UpdateCredentialsPayloadDeserializeResult {
    UpdateCredentialsPayload value;
    u64 bytes_read;
};

dictionary BakerKeyPairs {
    Bytes signature_sign;
    Bytes signature_verify;
    Bytes election_sign;
    Bytes election_verify;
    Bytes aggregation_sign;
    Bytes aggregation_verify;
};

dictionary BakerKeysPayload {
    Bytes signature_verify_key;
    Bytes election_verify_key;
    Bytes aggregation_verify_key;
    Bytes proof_sig;
    Bytes proof_election;
    Bytes proof_aggregation;
};

/// Describes the different contract module schema versions
enum ModuleSchemaVersion {
    "V0",
    "V1",
    "V2",
    "V3",
};

/// Represents a contract module schema of a specific version.
dictionary ModuleSchema {
    /// The module schema serialized as bytes.
    bytes value;
    /// The module schema version. This is optional, as this can also be included in the serialized schema value.
    /// If the version is neither present in the serialized schema, nor defined explicitly, an error will be returned upon use.
    ModuleSchemaVersion? version;
};

/// Represents a schema for a specific type used in a contract.
dictionary TypeSchema {
    /// The type schema serialized as bytes.
    bytes value;
};

/// Encryption keypair for an account, used to handle the encrypted amount associated with a specific account.
dictionary EncryptionKeys {
    /// The secret key serialized as bytes.
    Bytes secret;
    /// The public key serialized as bytes.
    Bytes public;
};

/// For the case where the verifier wants the user to show the value of an
/// attribute and prove that it is indeed the value inside the on-chain
/// commitment. Since the verifier does not know the attribute value before
/// seing the proof, the value is not present here.
dictionary RevealAttributeStatementV1 {
    /// The attribute that the verifier wants the user to reveal.
    AttributeTag attribute_tag;
};

/// For the case where the verifier wants the user to prove that an attribute is
/// in a range. The statement is that the attribute value lies in `[lower,
/// upper)` in the scalar field.
dictionary AttributeInRangeStatementV1 {
    /// The attribute that the verifier wants the user to prove is in a range.
    AttributeTag attribute_tag;
    /// The lower bound on the range.
    string lower;
    /// The upper bound of the range.
    string upper;
};

/// For the case where the verifier wants the user to prove that an attribute is
/// in a set of attributes.
dictionary AttributeInSetStatementV1 {
    /// The attribute that the verifier wants the user prove lies in a set.
    AttributeTag attribute_tag;
    /// The set that the attribute should lie in.
    sequence<string> set;
};

/// For the case where the verifier wants the user to prove that an attribute is
/// not in a set of attributes.
dictionary AttributeNotInSetStatementV1 {
    /// The attribute that the verifier wants the user to prove does not lie in
    /// a set.
    AttributeTag attribute_tag;
    /// The set that the attribute should not lie in.
    sequence<string> set;
};

/// Statements are composed of one or more atomic statements.
/// This type defines the different types of atomic statements.
[Enum]
interface AtomicStatementV1 {
    /// The atomic statement stating that an attribute should be revealed.
    RevealAttribute(RevealAttributeStatementV1 statement);
    /// The atomic statement stating that an attribute is in a range.
    AttributeInRange(AttributeInRangeStatementV1 statement);
    /// The atomic statement stating that an attribute is in a set.
    AttributeInSet(AttributeInSetStatementV1 statement);
    /// The atomic statement stating that an attribute is not in a set.
    AttributeNotInSet(AttributeNotInSetStatementV1 statement);
};

/// A statement is a list of atomic statements.
dictionary StatementV1 {
    sequence<AtomicStatementV1> statements;
};

/// The different types of proofs, corresponding to the statements above.
[Enum]
interface AtomicProofV1 {
    /// The atomic statement stating that an attribute should be revealed.
    RevealAttribute(string attribute, Bytes proof);
    /// The atomic proof stating that an attribute is in a range.
    AttributeInRange(Bytes proof);
    /// The atomic proof stating that an attribute is in a set.
    AttributeInSet(Bytes proof);
    /// The atomic proof stating that an attribute is not in a set.
    AttributeNotInSet(Bytes proof);
};

/// A proof of a statement, composed of one or more atomic proofs.
dictionary ProofV1 {
    sequence<AtomicProofV1> proofs;
};

/// A versioned variant of `ProofV1`
dictionary VersionedProofV1 {
    /// The version associated with the value
    u32 version;
    /// The proof
    ProofV1 value;
};

/// A value of an attribute. This is the low-level representation. The
/// different variants are present to enable different representations in JSON,
/// and different embeddings as field elements when constructing and verifying
/// proofs.
[Enum]
interface Web3IdAttribute {
    String(string value);
    Numeric(u64 value);
    Timestamp(timestamp value);
};
/// For the case where the verifier wants the user to show the value of an
/// attribute and prove that it is indeed the value inside the on-chain
/// commitment. Since the verifier does not know the attribute value before
/// seing the proof, the value is not present here.
dictionary RevealAttributeStatementV2 {
    /// The attribute that the verifier wants the user to reveal.
    string attribute_tag;
};

/// For the case where the verifier wants the user to prove that an attribute is
/// in a range. The statement is that the attribute value lies in `[lower,
/// upper)` in the scalar field.
dictionary AttributeInRangeStatementV2 {
    /// The attribute that the verifier wants the user to prove is in a range.
    string attribute_tag;
    /// The lower bound on the range.
    Web3IdAttribute lower;
    /// The upper bound of the range.
    Web3IdAttribute upper;
};

/// For the case where the verifier wants the user to prove that an attribute is
/// in a set of attributes.
dictionary AttributeInSetStatementV2 {
    /// The attribute that the verifier wants the user prove lies in a set.
    string attribute_tag;
    /// The set that the attribute should lie in.
    sequence<Web3IdAttribute> set;
};

/// For the case where the verifier wants the user to prove that an attribute is
/// not in a set of attributes.
dictionary AttributeNotInSetStatementV2 {
    /// The attribute that the verifier wants the user to prove does not lie in
    /// a set.
    string attribute_tag;
    /// The set that the attribute should not lie in.
    sequence<Web3IdAttribute> set;
};

/// Statements are composed of one or more atomic statements.
/// This type defines the different types of atomic statements.
[Enum]
interface AtomicStatementV2 {
    /// The atomic statement stating that an attribute should be revealed.
    RevealAttribute(RevealAttributeStatementV2 statement);
    /// The atomic statement stating that an attribute is in a range.
    AttributeInRange(AttributeInRangeStatementV2 statement);
    /// The atomic statement stating that an attribute is in a set.
    AttributeInSet(AttributeInSetStatementV2 statement);
    /// The atomic statement stating that an attribute is not in a set.
    AttributeNotInSet(AttributeNotInSetStatementV2 statement);
};

/// Represents an address of a smart contract
dictionary ContractAddress {
    u64 index;
    u64 subindex;
};

/// A statement about a single credential, either an identity credential or a
/// Web3 credential.
[Enum]
interface VerifiableCredentialStatement {
    /// Statement about a credential derived from an identity issued by an
    /// identity provider.
    Account(Network network, Bytes cred_id, sequence<AtomicStatementV1> statement);
    /// Statement about a credential issued by a Web3 identity provider, a smart
    /// contract.
    Web3Id(sequence<string> cred_type, Network network, ContractAddress contract, Bytes holder_id,  sequence<AtomicStatementV2> statement);
};


/// A request for a proof. This is the statement and challenge. The secret data
/// comes separately.
dictionary VerifiablePresentationRequest {
    Bytes challenge;
    sequence<VerifiableCredentialStatement> statements;
};

/// The different types of proofs, corresponding to the statements above.
[Enum]
interface AtomicProofV2 {
    /// The atomic statement stating that an attribute should be revealed.
    RevealAttribute(Web3IdAttribute attribute, Bytes proof);
    /// The atomic proof stating that an attribute is in a range.
    AttributeInRange(Bytes proof);
    /// The atomic proof stating that an attribute is in a set.
    AttributeInSet(Bytes proof);
    /// The atomic proof stating that an attribute is not in a set.
    AttributeNotInSet(Bytes proof);
};

/// The additional inputs, additional to the `VerifiablePresentationRequest` that are needed to
/// produce a `VerifablePresentation`.
[Enum]
interface VerifiableCredentialCommitmentInputs {
    /// Inputs are for an identity credential issued by an identity provider.
    Account(u32 issuer, record<AttributeTag, string> values, record<AttributeTag, Bytes> randomness);
    /// Inputs are for a credential issued by Web3ID issuer.
    Web3Issuer(Bytes signature, bytes signer, record<string, Web3IdAttribute> values, record<string, Bytes> randomness);
};

/// A pair of a statement and a proof for an account credential statement.
dictionary AccountStatementWithProof {
    AtomicStatementV1 statement;
    AtomicProofV1 proof;
};

/// A pair of a statement and a proof for a Web3 ID credential statement.
dictionary Web3IdStatementWithProof {
    AtomicStatementV2 statement;
    AtomicProofV2 proof;
};

/// Commitments signed by the issuer.
dictionary SignedCommitments {
    Bytes signature;
    record<string, Bytes> commitments;
};

[Enum]
interface IdentifierType {
    /// Reference to an account via an address.
    Account(string address_base58);
    /// Reference to a specific credential via its ID.
    Credential(Bytes cred_id);
    /// Reference to a specific smart contract instance.
    ContractData(ContractAddress address, string entrypoint, Bytes parameter);
    /// Reference to a specific Ed25519 public key.
    PublicKey(bytes key);
    /// Reference to a specific identity provider.
    Idp(u32 idp_identity);
};

dictionary DID {
    /// The network part of the method.
    Network network;
    /// The remaining identifier.
    IdentifierType id_type;
};

/// A full verifiable credential for Web3 ID credentials, including secrets.
dictionary Web3IdCredential {
    /// The credential holder's public key.
    Bytes holder_id;
    /// The network to which the credential applies.
    Network network;
    /// The address of the credential registry where the credential is tracked.
    ContractAddress registry;
    /// Credential type describing what kind of a credential it is.
    sequence<string> credential_type;
    /// Link to the credential schema.
    string credential_schema;
    /// The issuer's public key.
    Bytes issuer_key;
    /// Start of the validity of the credential.
    timestamp valid_from;
    /// After this date, the credential becomes expired. `None` corresponds to a
    /// credential that cannot expire.
    timestamp? valid_until;
    /// The values of different attributes, indexed by attribute tags.
    record<string, Web3IdAttribute> values;
    /// The randomness to go along with commitments in `values`. This has to
    /// have the same keys as the `values` field, but it is more
    /// convenient if it is a separate map itself.
    record<string, Bytes> randomness;
    /// The signature on the holder's public key, the contract address of the
    /// issuer, and the commitments from the issuer.
    Bytes signature;
};

/// A proof corresponding to one `VerifiableCredentialStatement`. This contains almost
/// all the information needed to verify it, except the issuer's public key in
/// case of the `Web3Id` proof, and the public commitments in case of the
/// `Account` proof.
[Enum]
interface VerifiableCredentialProof {
    Account(timestamp created, Network network, Bytes cred_id, u32 issuer, sequence<AccountStatementWithProof> proofs);
    Web3Id(timestamp created, Bytes holder_id, Network network, ContractAddress contract, sequence<string> cred_type, SignedCommitments commitments, sequence<Web3IdStatementWithProof> proofs);
};

/// A proof that establishes that the owner of the credential has indeed created
/// the presentation. At present this is a list of signatures.
dictionary LinkingProof {
    timestamp created;
    sequence<Bytes> proof_value;
};

/// A presentation is the response to a `VerifiableCredentialRequest`. It contains proofs for
/// statements, ownership proof for all Web3 credentials, and a context. The
/// only missing part to verify the proof are the public commitments.
dictionary VerifiablePresentation {
    Bytes presentation_context;
    sequence<VerifiableCredentialProof> verifiable_credential;
    /// Signatures from keys of Web3 credentials (not from ID credentials).
    /// The order is the same as that in the `credential_proofs` field.
    LinkingProof linking_proof;
};

namespace crypto {
    /// Compute the IdCredSec for the provided seed and identity indexes.
    [Throws=ConcordiumWalletCryptoError]
    Bytes identity_cred_sec(Bytes seed, Network network, u32 identity_provider_id, u32 identity_index);

    /// Compute the PRF-key for the provided seed and identity indexes.
    [Throws=ConcordiumWalletCryptoError]
    Bytes identity_prf_key(Bytes seed, Network network, u32 identity_provider_id, u32 identity_index);

    /// Compute the signature blinding randomness for the provided seed and identity indexes.
    [Throws=ConcordiumWalletCryptoError]
    Bytes identity_attributes_signature_blinding_randomness(Bytes seed, Network network, u32 identity_provider_id, u32 identity_index);

    /// Compute the account credential signing key for the provided seed, identity indexes, and credential counter.
    [Throws=ConcordiumWalletCryptoError]
    Bytes account_credential_signing_key(Bytes seed, Network network, u32 identity_provider_id, u32 identity_index, u8 credential_counter);

    /// Compute the account credential public key for the provided seed, identity indexes, and credential counter.
    [Throws=ConcordiumWalletCryptoError]
    Bytes account_credential_public_key(Bytes seed, Network network, u32 identity_provider_id, u32 identity_index, u8 credential_counter);

    /// Compute the credential ID for the provided seed, identity indexes, credential counter, and the chain's commitment key.
    [Throws=ConcordiumWalletCryptoError]
    Bytes account_credential_id(Bytes seed, Network network, u32 identity_provider_id, u32 identity_index, u8 credential_counter, Bytes commitment_key);

    /// Compute the attribute commitment randomness for the provided seed, identity indexes, credential counter, and attribute number.
    [Throws=ConcordiumWalletCryptoError]
    Bytes account_credential_attribute_commitment_randomness(Bytes seed, Network network, u32 identity_provider_id, u32 identity_index, u8 credential_counter, u8 attribute);

    /// Compute the signing key for the provided seed, issuer indexes, and verifiable credential index.
    [Throws=ConcordiumWalletCryptoError]
    Bytes verifiable_credential_signing_key(Bytes seed, Network network, u64 issuer_index, u64 issuer_subindex, u32 verifiable_credential_index);

    /// Compute the public key for the provided seed, issuer indexes, and verifiable credential index.
    [Throws=ConcordiumWalletCryptoError]
    Bytes verifiable_credential_public_key(Bytes seed, Network network, u64 issuer_index, u64 issuer_subindex, u32 verifiable_credential_index);

    /// Compute the encoded verifiable credential backup encryption key for the provided seed.
    [Throws=ConcordiumWalletCryptoError]
    Bytes verifiable_credential_backup_encryption_key(Bytes seed, Network network);

    /// Compute an identity issuance request for the identity contained in the provided parameters.
    /// The result is a versioned `PreIdentityObject` encoded as JSON,
    /// which is the format expected by the identity provider's issuance endpoint.
    [Throws=ConcordiumWalletCryptoError]
    string identity_issuance_request_json(IdentityIssuanceRequestParameters params);

    /// Construct an identity recovery request for the identity contained in the provided parameters.
    /// The result encoded as JSON in the format expected by the identity provider's recovery endpoint.
    [Throws=ConcordiumWalletCryptoError]
    string identity_recovery_request_json(IdentityRecoveryRequestParameters params);

    /// Construct an account credential from the information contained in the provided parameters.
    [Throws=ConcordiumWalletCryptoError]
    AccountCredentialWithRandomness account_credential(AccountCredentialParameters params);

    /// Compute the hash of a new credential deployment to be signed by the account key derived for the credential.
    [Throws=ConcordiumWalletCryptoError]
    Bytes account_credential_deployment_hash(AccountCredential credential, u64 expiry_unix_secs);

    /// Serializes the credential deployment payload for submission as a "raw" payload to a node.
    [Throws=ConcordiumWalletCryptoError]
    Bytes account_credential_deployment_signed_payload(SignedAccountCredential credential);

    /// Construct the payload for a TransferToPublic transaction. The `to_transfer` amount is specififed in microCCD.
    [Throws=ConcordiumWalletCryptoError]
    SecToPubTransferData sec_to_pub_transfer_data(GlobalContext ctx, Bytes sender_secret_key, InputEncryptedAmount input_amount, MicroCCDAmount to_transfer);

    /// Attempt to deserialize SecToPubTransferData from the supplied bytes. This will fail if the number of bytes does not exactly match the expected number.
    [Throws=ConcordiumWalletCryptoError]
    SecToPubTransferDataDeserializeResult deserialize_sec_to_pub_transfer_data(bytes bytes);

    /// Attempt to serialize CredentialDeploymentInfo into bytes. This will fail if any of the raw hex representations do not match the corresponding types in concordium-base
    [Throws=ConcordiumWalletCryptoError]
    bytes serialize_credential_deployment_info(CredentialDeploymentInfo cred_info);

    /// Attempt to deserialize UpdateCredentialsPayloadDeserializeResult from the supplied bytes. This will fail if the number of bytes does not exactly match the expected number.
    [Throws=ConcordiumWalletCryptoError]
    UpdateCredentialsPayloadDeserializeResult deserialize_update_credentials_payload(bytes bytes);

    /// Attempt to create a BakerKeysPayload for the account and associated baker keys
    [Throws=ConcordiumWalletCryptoError]
    BakerKeysPayload make_configure_baker_keys_payload(string account_base58, BakerKeyPairs baker_keys);

    /// Create a set of baker keys
    BakerKeyPairs generate_baker_keys();

    /// Returns the schema template for the given `TypeSchema`
    [Throws=SchemaError]
    string display_type_schema_template(TypeSchema schema);

    /// Deserialize the provided value into the JSON representation of a type corresponding to the provided `schema`
    [Throws=SchemaError]
    string deserialize_type_value(bytes value, TypeSchema schema);

    /// Serialize the provided value from the JSON representation of a type corresponding to the provided `schema`
    [Throws=SchemaError]
    bytes serialize_type_value(string json, TypeSchema schema);

    /// Get the `TypeSchema` for a parameter of a given receive function
    [Throws=SchemaError]
    TypeSchema get_receive_parameter_schema(ModuleSchema schema, string contract_name, string function_name);

    /// Get the `TypeSchema` for a return value of a given receive function
    [Throws=SchemaError]
    TypeSchema get_receive_return_value_schema(ModuleSchema schema, string contract_name, string function_name);

    /// Get the `TypeSchema` for an error of a given receive function
    [Throws=SchemaError]
    TypeSchema get_receive_error_schema(ModuleSchema schema, string contract_name, string function_name);

    /// Get the `TypeSchema` for a parameter of the init function of a contract
    [Throws=SchemaError]
    TypeSchema get_init_parameter_schema(ModuleSchema schema, string contract_name);

    /// Get the `TypeSchema` for an error of the init function of a contract
    [Throws=SchemaError]
    TypeSchema get_init_error_schema(ModuleSchema schema, string contract_name);

    /// Get the `TypeSchema` for events emitted by a contract
    [Throws=SchemaError]
    TypeSchema get_event_schema(ModuleSchema schema, string contract_name);

    /// Attempt to create the encryption keys associated with an account at the given credential index
    [Throws=ConcordiumWalletCryptoError]
    EncryptionKeys get_encryption_keys(GlobalContext global_context, Bytes prf_key, u8 credential_index);

    /// Attempt to create the encryption keys associated with an account at the given credential index
    [Throws=ConcordiumWalletCryptoError]
    MicroCCDAmount decrypt_amount(Bytes encrypted_amount, Bytes encryption_secret_key);

    /// Attempt to combine two encrypted amounts
    [Throws=ConcordiumWalletCryptoError]
    Bytes combine_encrypted_amounts(Bytes left, Bytes right);

    /// Prove the supplied statement in the context of a given identity and credential
    [Throws=ConcordiumWalletCryptoError]
    VersionedProofV1 prove_statement_v1(Bytes seed, Network net, GlobalContext global_context, u32 ip_index, u32 identity_index, u8 credential_index, IdentityObject identity_object, StatementV1 statement, Bytes challenge);

    /// Create a verifiable presentation from a `VerifiablePresentationRequest`, the associated
    /// commitment inputs and the cryptographic parameters of the chain.
    [Throws=ConcordiumWalletCryptoError]
    VerifiablePresentation create_verifiable_presentation(VerifiablePresentationRequest request, GlobalContext global, sequence<VerifiableCredentialCommitmentInputs> commitment_inputs);

    /// Parse the `Method` from the given string
    [Throws=ConcordiumWalletCryptoError]
    DID parse_did_method(string value);

    /// Format the given `Method` as a DID string
    [Throws=ConcordiumWalletCryptoError]
    string did_method_as_string(DID did);
};
